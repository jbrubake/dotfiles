#!/bin/sh
#
# ~/.env: environment variables

export BASH_ENV=$HOME/.bash.env # non-interactive setup
export ENV=$HOME/.shinit        # equivalent to .bashrc for sh

# Sane defaults {{{1
#
: "${HOME:=$(cd; pwd)}"
: "${LOGNAME:=$(id -un)}"
: "${UNAME:=$(uname)}"
: "${TMPDIR:=/tmp}"
: "${TMP:=$TMPDIR}"
export HOME LOGNAME UNAME TMPDIR TMP

# Helper functions {{{1
# NOTE: these are unset at the end of the file
#
# pathadd {{{2
#
# @description Add an entry to the front of PATH.
# If the entry is present, it is not added again.
#
# @arg $1 str Entry to add
#
# @set PATH
#
pathadd() {
    case :$PATH: in
        *:$1:*) ;;
        *) PATH=$1:$PATH ;;
    esac
}

# have {{{2
#
# @description Check PATH for a command
#
# @arg $1 str Command to search for
#
# @exitcode true if found
# @exitcode false if not found
#
have() { command -v "$1" >/dev/null; }

# pick {{{2
#
# @description Wrapper for my that uses defaults
# if my is not installed
#
# @arg $1 str Category to pass to my
# @arg $@ str Alternatives if my is not installed
#
# @stdout Result of my or first alternative found in PATH
pick() {
    unset p
    have my && 
        p=$(my -v "$1" 2>/dev/null)

    if [ -z "$p" ]; then
        shift
        for p in $@; do
            if have "$p"; then
                printf "$p"
                return
            fi
        done
    else
        printf "$p"
    fi
}

# XDG Directores {{{1
#
# XDG_*=<path>                          # Purpose            (equivalent) # Default
export XDG_CONFIG_HOME="$HOME/.config"  # config files       (/etc)       # ~/.config
export XDG_CACHE_HOME="$HOME/var/cache" # non-essential data (/var/cache) # ~/.cache
export XDG_DATA_HOME="$HOME/share"      # data files         (/usr/share) # ~/.local/share
export XDG_STATE_HOME="$HOME/var/lib"   # state data         (/var/lib)   # ~/.local/state

have flatpak &&
    export XDG_DATA_DIRS=$XDG_DATA_HOME/flatpak/exports/share:$XDG_DATA_DIRS

# Setup PATH {{{1
#
# Make sure standard directories are in PATH. Listed in order from least- to most-significant
# NOTE: /{s,}bin is here because some systems do not add it as it is just a symlink to
# /usr/{s,}bin. However, certain (Alpine) LXC containers require it
for d in \
    /usr/local/games \
    /bin \
    /sbin \
    /usr/local/bin \
    /usr/local/sbin \
    "$HOME/bin" \
; do
    [ -d "$d" ] && pathadd "$d"
done

# Locale and timezone {{{1
#
: "${LANG:=en_US.UTF-8}"
: "${LANGUAGE:=$LANG}"
: "${LC_CTYPE:=$LANG}"
: "${LC_ALL:=$LANG}"
export LANG LANGUAGE LC_CTYPE LC_ALL

# Colors 'n' Stuff {{{1
#
have highlight  && export HIGHLIGHT_STYLE=base16/google-dark
have bat        && export BAT_THEME='Solarized (light)'
have pygmentize && export PYGMENTIZE_STYLE=solarized-light

unset HAS_COLOR
[ "$(tput colors)" != 0 ] || [ -n "$DISPLAY" ] && export HAS_COLOR=1

# X-specific {{{2
#
# Select Window Manager or Desktop Environment
#
# Supports:
#   Any WM/DE that is run as a single command with no arguments
#
export WINDOWMANAGER=cwm

# Select Xresources colorscheme
#
# Colorscheme definitions must be placed in
# $HOME/.Xresources.$COLORSCHEME
#
export COLORSCHEME=gnome-dark

# Give Vim access to the terminal colorscheme. See ~/.vimrc
export VIM_TERMINAL_COLORS=$(awk '$2 ~ /COLOR/ {print gensub(/COLOR/, "", "1", $2), $3}' \
    ~/.Xresources."$COLORSCHEME" |
        sort -n |
        sed -e '1i[' -e '$a]' -e 's/^/"/' -e 's/$/"/' -e '$!s/$/,/' |
        tr -d '\n')

# Alternatives {{{1
#
# EDITOR/VISUAL {{{2
#
export EDITOR=$(pick editor 'vim vi nano pico ed')
export VISUAL=$EDITOR
export FCEDIT=$EDITOR

# PAGER/MANPAGER {{{2
#
export PAGER=$(pick pager 'less most more')
export MANPAGER=$(pick manpager 'less most more')

if have ack; then
    export ACK_PAGER=$PAGER
    export ACK_PAGER_COLOR=$PAGER
fi

# Configure pager {{{3
for p in "$PAGER" "$MANPAGER"; do
    case $p in
        vimpager)
            export VIMPAGER_RC="$HOME/.vimrc" ;;
        less)
            # NOTE: $LESS_TERMCAP_* variables are set in ~/.shinit
            # because *this* file may be sourced *before* TERM is defined

            export LESSCHARSET='utf-8';
            export LESS='-R --quit-if-one-screen'

            # Colorize things if highlight or pygmentize is available
            #
            # The '||' here is intentional, see rhbz@1254837
            if have highlight; then
                export LESSOPEN="||highlight --force -O truecolor --style $HIGHLIGHT_STYLE %s"
            elif have pygmentize; then
                export LESSOPEN="||pygmentize -O style=$PYGMENTIZE_STYLE -g %s"
            fi
            ;;
    esac
    unset p
done

# Pass $LESS to MANPAGER if it is less
[ "$MANPAGER" = 'less' ] && MANPAGER="less $LESS"

# Web browser {{{2
#
browsers='elinks links w3m lynx'
[ -n "$DISPLAY" ] &&
    browsers="firefox google-chrome chromium netsurf $browsers"
BROWSER=$(pick browser "$browsers")
unset browsers
export BROWSER

# ls {{{2
#
export LS=$(pick ls 'ls eza exa')
case $LS in
    eza | exa) export LS_OPTS="--group-directories-first --sort extension -F ${HAS_COLOR:+--color=auto}" ;;
    ls) if command ls --version | grep -q GNU; then
            export LS_OPTS="--group-directories-first -hXFH ${HAS_COLOR:+--color=auto}"
        else
            export LS_OPTS='-XFH'
        fi ;;
esac

# dircolors {{{1
#
if [ -n "$HAS_COLOR" ] && have dircolors; then
    # If colorfile remains blank, dircolors will use defaults
    colorfile=
    if [ -r "$HOME/.dircolors" ]; then
        colorfile=$HOME/.dircolors 
    elif [ -r "/etc/DIR_COLORS" ]; then
        colorfile=/etc/DIR_COLORS
    fi

    eval $(dircolors "$colorfile")

    unset colorfile localcolorfile
fi

# fzf {{{1
if have fzf; then
    # Options for *all* fzf processes
    export FZF_DEFAULT_OPTS='
        --layout=reverse
        --height=50%'

    # Options for fzf-tmux
    #     Open in a floating pane
    export FZF_TMUX_OPTS="-p $FZF_DEFAULT_OPTS"

    # fzf-tmux height (needed for C-t, C-r and M-c)
    export FZF_TMUX_HEIGHT=

    # Options for C-r history search
    export FZF_CTRL_R_OPTS='--preview-window down:5 --preview "echo {2..}"'

    # C-t file search command
    export FZF_CTRL_T_COMMAND=

    # Options for C-t file search
    export FZF_CTRL_T_OPTS='--preview "
        if   [ -f {} ]; then bat -pp --color always {}
        elif [ -d {} ]; then tree -C -L 1 --gitignore --noreport {}
        fi"'

    # M-c directory search command
    export FZF_ALT_C_COMMAND=

    # Options for M-c directory search
    export FZF_ALT_C_OPTS='--preview "tree -C -L 1 --gitignore --noreport {}"'

    have rg &&
        export FZF_DEFAULT_COMMAND='rg --files'
fi

# Development {{{1
# Perl {{{2
#
perl_dir=$HOME/lib/perl5
if [ -d "$perl_dir" ]; then
    pathadd "$perl_dir/bin"
    export PERL5LIB=$perl_dir/${PERL5LIB:+:${PERL5LIB}}
    export PERL_LOCAL_LIB_ROOT=$perl_dir${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}
    export PERL_MB_OPT="--install_base $perl_dir"
    export PERL_MM_OPT=INSTALL_BASE=$perl_dir
fi
unset perl_dir

if have cpanm; then
    export PERL_CPANM_HOME=$XDG_CACHE_HOME/cpanm
    mkdir -p "$PERL_CPANM_HOME"
fi

# ARM cross-compiler {{{2
#
[ -d "$HOME/opt/arm-none-eabi/" ] &&
    pathadd "$HOME/opt/arm-none-eabi/bin"
[ -d "$HOME/opt/aarch64-elf/bin/" ] &&
    pathadd "$HOME/opt/aarch64-elf/bin"

# Python {{{2
#
# Sigh. Python can't find user site-packages because I refuse to use
# .local or whatever other silly crap it expects
 export PYTHONPATH=$HOME/lib/python3/site-packages
[ -d "$PYTHONPATH/bin" ] && pathadd "$PYTHONPATH/bin"

# Rust {{{2
[ -d "$HOME/.cargo/bin" ] && pathadd "$HOME/.cargo/bin"
export CARGO_HOME=$XDG_CACHE_HOME/cargo

# Packer {{{2
export PACKER_CONFIG_DIR=$XDG_STATE_HOME
export PACKER_CONFIG=$XDG_CONFIG_HOME/packerconfig
export PACKER_CACHE_DIR=$XDG_CACHE_HOME/packer

# Go {{{2
[ -d "/opt/go/bin" ] && pathadd "/opt/go/bin"
export GOPATH=~
export GOCACHE=~/var/cache/go-build
export GOMODCACHE=~/var/cache/go-build/mod
mkdir -p "$GOPATH"
mkdir -p "$GOCACHE"
mkdir -p "$GOMODCACHE"

# gcloud {{{2
#
[ -d '/opt/google-cloud-sdk/bin' ] && pathadd /opt/google-cloud-sdk/bin

# Other {{{2
[ -r "unix://$XDG_RUNTIME_DIR/podman/podman.sock" ] &&
    export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock 

# System specific {{{1
#
case "$(uname -o)" in
    *) ;;
esac

# Bash-specific {{{1
#
if have bash; then
    # Filename completion ignores backups and vim swap files
    #
    export FIGNORE="~:.swp"

    # History stuff
    #
    export HISTFILE="$XDG_STATE_HOME/misc/bash_history"
    export HISTSIZE=100              # Max history entries
    export HISTFILESIZE=200          # Allow average of two lines per entry
    export HISTCONTROL="erasedups"   # No duplicate history entries
    export HISTIGNORE="&:[bf]g:exit" # History ignores these matches

    mkdir -p "$(dirname "$HISTFILE")"

    # Create nerd-font variables
    [ -f "$HOME/share/nerd-font/scripts/i_all.sh" ] &&
        . "$HOME/share/nerd-font/scripts/i_all.sh"
fi

# Miscellaneous {{{1
export LOCATEDB="$HOME/var/lib/locate/locate.db"

LESSHISTFILE="$XDG_STATE_HOME/misc/lesshst"
mkdir -p "$(dirname "$LESSHISTFILE")"

if [ -d ~/wiki ]; then
    export WIKI_DIR=~/wiki
    export WIKI_SITE=~/wiki/site
fi

# This is used in vimrc and scripts/curlvim
[ -d ~/src/dotfiles ] &&
    export DOTFILES=~/src/dotfiles

# Always use my .inputrc
if [ -r "$HOME/.inputrc" ]; then
    export INPUTRC="$HOME/.inputrc"
fi

# Set news server
export NNTPSERVER=snews://news.eternal-september.org

# Set local mail directory
export MAIL="$HOME/.maildir/local"

# Enable pass(1) extensions
have pass &&
    export PASSWORD_STORE_ENABLE_EXTENSIONS=true

# pinentry stuff
[ -x "$HOME/bin/pinentry-ssh-askpass" ] &&
    export SSH_ASKPASS="$HOME/bin/pinentry-ssh-askpass"
if [ -n "$DISPLAY" ]; then
    export SUDO_ASKPASS="$SSH_ASKPASS"
fi

# *grep Colors
#
# sl    matching line (non-matching wwith -v)
# cx    context line (matching with -v, non-matching without -v)
# rv    reverse sl and cx when using -v (boolean)
# mt    set both ms and mc to this value
# ms    matching text (without -v)
# mc    matching text (in context line wwith -v)
# fn    filename 
# ln    line number 
# bn    byte offset
# se    separators
#
export GREP_COLORS='sl=:cx=:mt=1;31:fn=35:ln=32:bn=33:se=36'

# local-only SSH server
export LOCAL_SSHD_CONFIG=$HOME/etc/sshd/sshd_config

# wttr.in Location
#
LOCATION='Odenton, MD'

# Hostnames for bash-completion
if [ -r "$HOME/.ssh/known_hosts" ]; then
    export HOSTFILE="$HOME/.ssh/known_hosts"
fi

# Move things into XDG directories {{{2

have elinks &&
    export ELINKS_CONFDIR=$XDG_CONFIG_HOME/elinks

# Configure tldr-sh client {{{2
#
if have tldr; then
    export TLDR_HEADER='underline bold magenta'
    export TLDR_QUOTE='white'
    export TLDR_DESCRIPTION='italic bold blue'
    export TLDR_CODE='bold yellow'
    export TLDR_PARAM='reset white'
    export TLDR_EPARAM='white'
fi

# Finalize PATH {{{1
#
# Add personal directories. Listed in order from least- to most-significant
# NOTE: do not use pathadd as I want to force these entries to be at the front
for d in \
    ~/games \
    ~/sbin \
    ~/bin/.flatpak \
    ~/bin \
; do
    [ -d "$d" ] && PATH=$d:$PATH
done 

# NOTE: adding a final : simplifies the awk
PATH=$(printf %s "$PATH:" | awk -vRS=: '!a[$0]++' | paste -s -d: -)

# Include local settings {{{1
#
[ -r "$HOME/.env.local" ] && . "$HOME/.env.local"

# Cleanup {{{1
#
unset pathadd
unset have
unset pick

# vim: foldlevel=0


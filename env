#!/bin/sh
#
# ~/.env: environment variables

# Set location of libsh
LIBSH=$HOME/lib/libsh/libsh.sh
export LIBSH

BASH_ENV="$HOME/.env"   # non-interactive setup
ENV="$HOME/.shinit" # equivalent to .bashrc for sh
export BASH_ENV ENV

# Sane defaults {{{1
#
: "${HOME:=~}"
: "${LOGNAME:=$(id -un)}"
: "${UNAME:=$(uname)}"
: "${TMPDIR:=/tmp}"
: "${TMP:=/tmp}"
export HOME LOGNAME UNAME TMPDIR TMP

# XDG Directores {{{1
# Defaults for now
#
# XDG_*=<path>                      # Purpose (equivalent)            # Default
XDG_CONFIG_HOME="$HOME/.config"     # config files (/etc)             # ~/.config
XDG_CACHE_HOME="$HOME/.local/cache" # non-essential data (/var/cache) # ~/.cache
XDG_DATA_HOME="$HOME/.local/share"  # data files (/usr/share)         # ~/.local/share
XDG_STATE_HOME="$HOME/.local/state" # state data (/var/lib)           # ~/.local/state
export XDG_CONFIG_HOME XDG_CACHE_HOME XDG_DATA_HOME XDG_STATE_HOME

# System defaults
#
if command -v flatpak >/dev/null; then
    export XDG_DATA_DIRS=$HOME/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/
fi

# Setup PATH {{{1
# TODO: think through PATH *order* better
# TODO: e.g. ~/bin should be first followed by go/rust/perl/etc then system stuff
# TODO: only add entry if it exists
# Path entries to add. Listed in order from least- to most-significant
# NOTE: /{s,}bin is here because Fedora doesn't add it as it is just a symlink to
# /usr/bin. However, certain (Alpine) LXC containers require it
paths="/bin /sbin /usr/local/games /usr/local/bin $HOME/games $HOME/sbin $HOME/bin"
for d in $paths; do
    # if [ -d "$d" ] && [ "$PATH" = "${PATH%"$d"*}" ]; then
        PATH="$d:$PATH"
    # fi
done

# Locale and timezone {{{1
#
: "${LANG:=en_US.UTF-8}"
: "${LANGUAGE:=en_US.UTF-8}"
: "${LC_CTYPE:=en_US.UTF-8}"
: "${LC_ALL:=en_US.UTF-8}"
export LANG
export LANGUAGE
export LC_CTYPE
export LC_ALL

if [ -r /etc/timezone ]; then
    TZ=$( cat /etc/timezone )
else
    TZ="America/New_York"
fi
export TZ

# X-specific {{{1
#
if [ -n "$DISPLAY" ]; then
    # Select Window Manager or Desktop Environment
    #
    # Supports:
    #   Any WM/DE that is run as a single command with no arguments
    #
    WINDOWMANAGER=cwm
    export WINDOWMANAGER

    # Select Xresources colorscheme
    #
    # Colorscheme definitions must be placed in
    # $HOME/.Xresources.$COLORSCHEME
    #
    COLORSCHEME=gnome-dark
    export COLORSCHEME
fi

# Alternatives {{{1
# EDITOR/VISUAL {{{2
#
if command -v >/dev/null my; then
    EDITOR=$(my -v editor 2>/dev/null)
fi
if test -z "$EDITOR"; then
    editors="vim vi nano pico ed"
    for e in $editors; do
        if command -v "$e" >/dev/null; then
            EDITOR="$e"
            break
        fi
    done
unset editors
fi
VISUAL=$EDITOR
FCEDIT=$EDITOR
export VISUAL
export FCEDIT
export EDITOR

# PAGER/MANPAGER {{{2
#
if command -v >/dev/null my; then
    PAGER=$(my -v pager 2>/dev/null)
fi
if test -z "$PAGER"; then
    pagers="vimpager less most more"
    for p in $pagers; do
        if command -v "$p" >/dev/null; then
            PAGER="$p"
            break
        fi
    done
unset pagers
fi
if test "$PAGER" = "vimpager"; then
    VIMPAGER_RC="$HOME/.vimrc"
    export VIMPAGER_RC
fi
MANPAGER=$PAGER
export PAGER
export MANPAGER

if command -v ack >/dev/null; then
    ACK_PAGER=$PAGER
    ACK_PAGER_COLOR=$PAGER
    export ACK_PAGER
    export ACK_PAGER_COLOR
fi

# Web browser {{{2
#
if command -v >/dev/null my; then
    BROWSER=$(my -v browser 2>/dev/null)
fi
if test -z "$BROWSER"; then
    browsers="elinks links w3m lynx"
    if test -n "$DISPLAY"; then
        browsers="firefox chrome chromium netsurf $browsers"
    fi
    for b in $browsers; do
        if command -v "$b" >/dev/null; then
            BROWSER="$b"
            break
        fi
    done
    unset browsers
fi
export BROWSER

# dircolors {{{1
#
if test "$( tput colors )" -ge 0 && command -v dircolors >/dev/null; then
    # If colorfile remains blank, dircolors will use defaults
    colorfile=
    if test -r "$HOME/.dircolors"; then
        colorfile="$HOME/.dircolors" 
    elif test -r "/etc/DIR_COLORS"; then
        colorfile='/etc/DIR_COLORS'
    fi

    test -r "$HOME/.dircolors.local" && localcolorfile="$HOME/.dircolors.local"
    eval $(cat $colorfile $localcolorfile | dircolors -)

    unset colorfile localcolorfile
fi

# fzf {{{1
if command -v fzf >/dev/null; then
    # Options for *all* fzf processes
    FZF_DEFAULT_OPTS='
        --layout=reverse
        --height=50%'

    # Options for fzf-tmux
    #     Open in a floating pane
    FZF_TMUX_OPTS="-p $FZF_DEFAULT_OPTS"

    # fzf-tmux height (needed for C-t, C-r and M-c)
    FZF_TMUX_HEIGHT=

    # Options for C-r history search
    FZF_CTRL_R_OPTS='--preview-window down:5 --preview "echo {2..}"'

    # C-t file search command
    FZF_CTRL_T_COMMAND=

    # Options for C-t file search
    FZF_CTRL_T_OPTS='--preview "
        if   [ -f {} ]; then bat -pp --color always {}
        elif [ -d {} ]; then tree -C -L 1 --gitignore --noreport {}
        fi"'

    # M-c directory search command
    FZF_ALT_C_COMMAND=

    # Options for M-c directory search
    FZF_ALT_C_OPTS='--preview "tree -C -L 1 --gitignore --noreport {}"'

    type rg >/dev/null 2>&1 &&
        FZF_DEFAULT_COMMAND='rg --files'

    export FZF_DEFAULT_OPTS
    export FZF_DEFAULT_COMMAND
    export FZF_TMUX
    export FZF_TMUX_OPTS
    export FZF_TMUX_HEIGHT
    export FZF_CTRL_R_OPTS
    export FZF_CTRL_T_COMMAND
    export FZF_CTRL_T_OPTS
    export FZF_ALT_C_COMMAND
    export FZF_ALT_C_OPTS
fi

# Development {{{1
# Perl {{{2
#
if test -d "$HOME/lib/perl5/"; then
    PATH="$HOME/lib/perl5/bin${PATH:+:${PATH}}"
    PERL5LIB="$HOME/lib/perl5/${PERL5LIB:+:${PERL5LIB}}"
    PERL_LOCAL_LIB_ROOT="$HOME/lib/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
    PERL_MB_OPT="--install_base $HOME/lib/perl5"
    PERL_MM_OPT="INSTALL_BASE=$HOME/lib/perl5"
    export PERL5LIB
    export PERL_LOCAL_LIB_ROOT
    export PERL_MB_OPT
    export PERL_MM_OPT
fi

if type cpanm >/dev/null 2>&1; then
    PERL_CPANM_HOME=$XDG_CACHE_HOME/cpanm
    export PERL_CPANM_HOME
    mkdir -p "$PERL_CPANM_HOME"
fi

# ARM cross-compiler {{{2
#
if test -d "$HOME/opt/arm-none-eabi/"; then
    PATH="$HOME/opt/arm-none-eabi/bin:$PATH"
    PATH="$HOME/opt/aarch64-elf/bin:$PATH"
fi

# Python {{{2
# Sigh. Python can't find user site-packages because I refuse to use
# .local or whatever other silly crap it expects
# PYTHONPATH=$HOME/lib/python3/site-packages
# test -d "$PYTHONPATH/bin" && PATH="$PYTHONPATH/bin:$PATH"
# export PYTHONPATH

# Rust {{{2
[ -d "$HOME/.cargo/bin" ] && PATH="$PATH:$HOME/.cargo/bin"
# TODO: These things *don't* really all belong in ~/share
# CARGO_HOME=$XDG_DATA_HOME/cargo
# export CARGO_HOME

# Packer {{{2
PACKER_CONFIG_DIR=$XDG_STATE_HOME
PACKER_CONFIG=$XDG_CONFIG_HOME/packerconfig
PACKER_CACHE_DIR=$XDG_CACHE_HOME/packer
export PACKER_CONFIG_DIR

# Go {{{2
if [ -d "/opt/go/bin" ]; then
    PATH="$PATH:/opt/go/bin"
fi

# System specific {{{1
#
case "$(uname -o)" in
    *) ;;
esac

# Miscellaneous {{{1
LOCATEDB="$HOME/var/lib/locate/locate.db"
export LOCATEDB

LESSHISTFILE="$XDG_STATE_HOME/misc/lesshst"
mkdir -p "$(dirname "$LESSHISTFILE")"

if [ -n "$BASH" ]; then
    # Filename completion ignores backups and vim swap files
    #
    FIGNORE="~:.swp"
    export FIGNORE

    # History stuff
    #
    HISTFILE="$XDG_STATE_HOME/misc/bash_history"
    HISTFILESIZE=50           # Max lines in history
    HISTCONTROL="ignoredups"  # No duplicate history entries
    HISTIGNORE="&:[bf]g:exit" # History ignores these matches

    export HISTFILESIZE
    export HISTCONTROL
    export HISTIGNORE

    mkdir -p "$(dirname "$HISTFILE")"
fi

export WIKI_DIR=~/wiki
export WIKI_SITE=~/wiki/site

export DOTFILES=~/src/dotfiles

# Create nerd-font variables
# FIXME: This should be *executed* instead bc it requires bash, but that hangs
if test -f "$HOME/share/nerd-font/scripts/i_all.sh"; then
    . "$HOME/share/nerd-font/scripts/i_all.sh"
fi

# Always use my .inputrc
if [ -r "$HOME/.inputrc" ]; then
    INPUTRC="$HOME/.inputrc"
    export INPUTRC
fi

# Set news server
# NNTPSERVER=nntp.aioe.org
NNTPSERVER=snews://news.eternal-september.org
export NNTPSERVER

# Set local mail directory
MAIL="$HOME/.maildir/local"
export MAIL

# Enable pass(1) extensions
PASSWORD_STORE_ENABLE_EXTENSIONS=true
export PASSWORD_STORE_ENABLE_EXTENSIONS

# pinentry stuff
SSH_ASKPASS="$HOME/bin/pinentry-ssh-askpass"
if [ -n "$DISPLAY" ]; then
    SUDO_ASKPASS="$SSH_ASKPASS"
fi
export SSH_ASKPASS
export SUDO_ASKPASS

# *grep Colors
#
# sl    matching line (non-matching wwith -v)
# cx    context line (matching with -v, non-matching without -v)
# rv    reverse sl and cx when using -v (boolean)
# mt    set both ms and mc to this value
# ms    matching text (without -v)
# mc    matching text (in context line wwith -v)
# fn    filename 
# ln    line number 
# bn    byte offset
# se    separators
#
GREP_COLORS='sl=:cx=:mt=1;31:fn=35:ln=32:bn=33:se=36'
export GREP_COLORS

# Move things into XDG directories {{{2

ELINKS_CONFDIR=$XDG_CONFIG_HOME/elinks
export ELINKS_CONFDIR

# Configure tldr-sh client {{{2
#
if command -v tldr >/dev/null; then
    TLDR_HEADER='underline bold magenta'
    TLDR_QUOTE='white'
    TLDR_DESCRIPTION='italic bold blue'
    TLDR_CODE='bold yellow'
    TLDR_PARAM='reset white'
    TLDR_EPARAM='white'

    export TLDR_PARAM
    export TLDR_EPARAM
    export TLDR_CODE
    export TLDR_DESCRIPTION
    export TLDR_HEADER
    export TLDR_QUOTE
fi

# Remove duplicate entries from PATH {{{2
PATH=$(printf %s "$PATH" | awk -vRS=: '!a[$0]++' | paste -s -d:)

# vim: foldlevel=0

#!/bin/sh
#
# ~/.env: environment variables

export BASH_ENV=$HOME/.bash.env # non-interactive setup
export ENV="$HOME/.shinit" # equivalent to .bashrc for sh


# Sane defaults {{{1
#
: "${HOME:=$(cd; pwd)}"
: "${LOGNAME:=$(id -un)}"
: "${UNAME:=$(uname)}"
: "${TMPDIR:=/tmp}"
: "${TMP:=/tmp}"
export HOME LOGNAME UNAME TMPDIR TMP

# XDG Directores {{{1
# Defaults for now
#
# XDG_*=<path>                          # Purpose (equivalent)            # Default
export XDG_CONFIG_HOME="$HOME/.config"  # config files (/etc)             # ~/.config
export XDG_CACHE_HOME="$HOME/var/cache" # non-essential data (/var/cache) # ~/.cache
export XDG_DATA_HOME="$HOME/share"      # data files (/usr/share)         # ~/.local/share
export XDG_STATE_HOME="$HOME/var/lib"   # state data (/var/lib)           # ~/.local/state

# System defaults
#
if command -v flatpak >/dev/null; then
    export XDG_DATA_DIRS=$XDG_DATA_HOME/flatpak/exports/share:$XDG_DATA_DIRS
    [ -d ~/bin/.flatpak ] && PATH=~/bin/.flatpak:$PATH
fi

# Setup PATH {{{1
# TODO: think through PATH *order* better
# TODO: e.g. ~/bin should be first followed by go/rust/perl/etc then system stuff
# TODO: only add entry if it exists
# Path entries to add. Listed in order from least- to most-significant
# NOTE: /{s,}bin is here because Fedora doesn't add it as it is just a symlink to
# /usr/bin. However, certain (Alpine) LXC containers require it
paths="/bin /sbin /usr/local/games /usr/local/bin $HOME/games $HOME/sbin $HOME/bin"
for d in $paths; do
    # if [ -d "$d" ] && [ "$PATH" = "${PATH%"$d"*}" ]; then
        PATH="$d:$PATH"
    # fi
done

# Locale and timezone {{{1
#
: "${LANG:=en_US.UTF-8}"
: "${LANGUAGE:=en_US.UTF-8}"
: "${LC_CTYPE:=en_US.UTF-8}"
: "${LC_ALL:=en_US.UTF-8}"
export LANG LANGUAGE LC_CTYPE LC_ALL

# X-specific {{{1
#
if [ -n "$DISPLAY" ]; then
    # Select Window Manager or Desktop Environment
    #
    # Supports:
    #   Any WM/DE that is run as a single command with no arguments
    #
    export WINDOWMANAGER=cwm

    # Select Xresources colorscheme
    #
    # Colorscheme definitions must be placed in
    # $HOME/.Xresources.$COLORSCHEME
    #
    export COLORSCHEME=gnome-dark
fi

# Alternatives {{{1
# EDITOR/VISUAL {{{2
#
if command -v my >/dev/null; then
    EDITOR=$(my -v editor 2>/dev/null)
fi
if test -z "$EDITOR"; then
    editors="vim vi nano pico ed"
    for e in $editors; do
        if command -v "$e" >/dev/null; then
            EDITOR="$e"
            break
        fi
    done
unset editors
fi
export EDITOR
export VISUAL=$EDITOR
export FCEDIT=$EDITOR

# PAGER/MANPAGER {{{2
#
if command -v my >/dev/null; then
    PAGER=$(my -v pager 2>/dev/null)
fi
if test -z "$PAGER"; then
    pagers="vimpager less most more"
    for p in $pagers; do
        if command -v "$p" >/dev/null; then
            PAGER="$p"
            break
        fi
    done
unset pagers
fi
if test "$PAGER" = "vimpager"; then
    export VIMPAGER_RC="$HOME/.vimrc"
fi
export PAGER
export MANPAGER=$PAGER

if command -v ack >/dev/null; then
    export ACK_PAGER=$PAGER
    export ACK_PAGER_COLOR=$PAGER
fi

# Web browser {{{2
#
if command -v my >/dev/null; then
    BROWSER=$(my -v browser 2>/dev/null)
fi
if test -z "$BROWSER"; then
    browsers="elinks links w3m lynx"
    test -n "$DISPLAY" &&
        browsers="firefox chrome chromium netsurf $browsers"
    for b in $browsers; do
        if command -v "$b" >/dev/null; then
            BROWSER="$b"
            break
        fi
    done
    unset browsers
fi
export BROWSER

# dircolors {{{1
#
if test "$( tput colors )" -ge 0 && command -v dircolors >/dev/null; then
    # If colorfile remains blank, dircolors will use defaults
    colorfile=
    if test -r "$HOME/.dircolors"; then
        colorfile="$HOME/.dircolors" 
    elif test -r "/etc/DIR_COLORS"; then
        colorfile='/etc/DIR_COLORS'
    fi

    test -r "$HOME/.dircolors.local" && localcolorfile="$HOME/.dircolors.local"
    eval $(cat $colorfile $localcolorfile | dircolors -)

    unset colorfile localcolorfile
fi

# fzf {{{1
if command -v fzf >/dev/null; then
    # Options for *all* fzf processes
    export FZF_DEFAULT_OPTS='
        --layout=reverse
        --height=50%'

    # Options for fzf-tmux
    #     Open in a floating pane
    export FZF_TMUX_OPTS="-p $FZF_DEFAULT_OPTS"

    # fzf-tmux height (needed for C-t, C-r and M-c)
    export FZF_TMUX_HEIGHT=

    # Options for C-r history search
    export FZF_CTRL_R_OPTS='--preview-window down:5 --preview "echo {2..}"'

    # C-t file search command
    export FZF_CTRL_T_COMMAND=

    # Options for C-t file search
    export FZF_CTRL_T_OPTS='--preview "
        if   [ -f {} ]; then bat -pp --color always {}
        elif [ -d {} ]; then tree -C -L 1 --gitignore --noreport {}
        fi"'

    # M-c directory search command
    export FZF_ALT_C_COMMAND=

    # Options for M-c directory search
    export FZF_ALT_C_OPTS='--preview "tree -C -L 1 --gitignore --noreport {}"'

    command -v rg >/dev/null &&
        export FZF_DEFAULT_COMMAND='rg --files'
fi

# Development {{{1
# Perl {{{2
#
if test -d "$HOME/lib/perl5/"; then
    PATH="$HOME/lib/perl5/bin${PATH:+:${PATH}}"
    export PERL5LIB="$HOME/lib/perl5/${PERL5LIB:+:${PERL5LIB}}"
    export PERL_LOCAL_LIB_ROOT="$HOME/lib/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
    export PERL_MB_OPT="--install_base $HOME/lib/perl5"
    export PERL_MM_OPT="INSTALL_BASE=$HOME/lib/perl5"
fi

if command -v cpanm >/dev/null; then
    export PERL_CPANM_HOME=$XDG_CACHE_HOME/cpanm
    mkdir -p "$PERL_CPANM_HOME"
fi

# ARM cross-compiler {{{2
#
if test -d "$HOME/opt/arm-none-eabi/"; then
    PATH="$HOME/opt/arm-none-eabi/bin:$PATH"
    PATH="$HOME/opt/aarch64-elf/bin:$PATH"
fi

# Python {{{2
# Sigh. Python can't find user site-packages because I refuse to use
# .local or whatever other silly crap it expects
 export PYTHONPATH=$HOME/lib/python3/site-packages
 test -d "$PYTHONPATH/bin" && PATH="$PYTHONPATH/bin:$PATH"

# Rust {{{2
[ -d "$HOME/.cargo/bin" ] && PATH="$PATH:$HOME/.cargo/bin"
# TODO: These things *don't* really all belong in ~/share
export CARGO_HOME=$XDG_CACHE_HOME/cargo

# Packer {{{2
export PACKER_CONFIG_DIR=$XDG_STATE_HOME
export PACKER_CONFIG=$XDG_CONFIG_HOME/packerconfig
export PACKER_CACHE_DIR=$XDG_CACHE_HOME/packer

# Go {{{2
[ -d "/opt/go/bin" ] && PATH="$PATH:/opt/go/bin"
export GOPATH=~
export GOCACHE=~/var/cache/go-build
export GOMODCACHE=~/var/cache/go-build/mod
mkdir -p "$GOPATH"
mkdir -p "$GOCACHE"
mkdir -p "$GOMODCACHE"

# System specific {{{1
#
case "$(uname -o)" in
    *) ;;
esac

# Miscellaneous {{{1
export LOCATEDB="$HOME/var/lib/locate/locate.db"

LESSHISTFILE="$XDG_STATE_HOME/misc/lesshst"
mkdir -p "$(dirname "$LESSHISTFILE")"

# Bash-specific {{{1
if [ -n "$BASH" ]; then
    # Filename completion ignores backups and vim swap files
    #
    export FIGNORE="~:.swp"

    # History stuff
    #
    export HISTFILE="$XDG_STATE_HOME/misc/bash_history"
    export HISTSIZE=100              # Max history entries
    export HISTFILESIZE=200          # Allow average of two lines per entry
    export HISTCONTROL="erasedups"   # No duplicate history entries
    export HISTIGNORE="&:[bf]g:exit" # History ignores these matches

    mkdir -p "$(dirname "$HISTFILE")"

    # Create nerd-font variables
    test -f "$HOME/share/nerd-font/scripts/i_all.sh" &&
        . "$HOME/share/nerd-font/scripts/i_all.sh"
fi

if [ -d ~/wiki ]; then
    export WIKI_DIR=~/wiki
    export WIKI_SITE=~/wiki/site
fi

# This is used in vimrc and scripts/curlvim
[ -d ~/src/dotfiles ] &&
    export DOTFILES=~/src/dotfiles

# Always use my .inputrc
if [ -r "$HOME/.inputrc" ]; then
    export INPUTRC="$HOME/.inputrc"
fi

# Set news server
# NNTPSERVER=nntp.aioe.org
export NNTPSERVER=snews://news.eternal-september.org

# Set local mail directory
export MAIL="$HOME/.maildir/local"

# Enable pass(1) extensions
command -v pass >/dev/null &&
    export PASSWORD_STORE_ENABLE_EXTENSIONS=true

# pinentry stuff
[ -x "$HOME/bin/pinentry-ssh-askpass" ] &&
    export SSH_ASKPASS="$HOME/bin/pinentry-ssh-askpass"
if [ -n "$DISPLAY" ]; then
    export SUDO_ASKPASS="$SSH_ASKPASS"
fi

# *grep Colors
#
# sl    matching line (non-matching wwith -v)
# cx    context line (matching with -v, non-matching without -v)
# rv    reverse sl and cx when using -v (boolean)
# mt    set both ms and mc to this value
# ms    matching text (without -v)
# mc    matching text (in context line wwith -v)
# fn    filename 
# ln    line number 
# bn    byte offset
# se    separators
#
export GREP_COLORS='sl=:cx=:mt=1;31:fn=35:ln=32:bn=33:se=36'

# Move things into XDG directories {{{2

command -v elinks >/dev/null &&
    export ELINKS_CONFDIR=$XDG_CONFIG_HOME/elinks

# Configure tldr-sh client {{{2
#
if command -v tldr >/dev/null; then
    export TLDR_HEADER='underline bold magenta'
    export TLDR_QUOTE='white'
    export TLDR_DESCRIPTION='italic bold blue'
    export TLDR_CODE='bold yellow'
    export TLDR_PARAM='reset white'
    export TLDR_EPARAM='white'
fi

# Remove duplicate entries from PATH {{{2
PATH=$(printf %s "$PATH" | awk -vRS=: '!a[$0]++' | paste -s -d: -)

# vim: foldlevel=0


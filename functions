#!/bin/sh
#
# Jeremy Brubaker <jbru362@gmail.com>

# Color Escape Functions {1

###################################################
# Functions to set colors and attributes
#
#  $(FX bold) sets bold attribute
#  $(FG 1) sets foreground color to ANSI color 1
#  $(BG 1) sets background color to ANSI color 1
#  $(FX bold; FG 1) sets foreground color to ANSI
#      color 1 and bold in one command
#
# These functions automatically interpret escape
# sequences so you don't need to pass '-e' to echo
#
# Based on P. C. SHyamshankar's spectrum script
# for zsh <github.com/sykora>.
# Changed to use functions instead of hashes for speed
# Changed to use tput(1) as much as possible
###################################################
FX() {
    case "$1" in
        reset)       printf "[0m"   ;;
        bold)        printf "[1m"   ;;
        nobold)      printf "[22m"  ;;
        dim)         printf "[2m"   ;;
        nodim)       printf "0m"    ;; # Unsupported
        italic)      printf "[3m"   ;;
        noitalic)    printf "[23m"  ;;
        underline)   printf "[4m"   ;;
        nounderline) printf "[24m"  ;;
        blink)       printf "[5m"   ;;
        fastblink)   printf "[6m"   ;;
        noblink)     printf "[25m"  ;;
        reverse)     printf "[7m"   ;;
        noreverse)   printf "[27m"  ;;
        hidden)      printf "[8m"   ;;
        nohidden)    printf "[28m"  ;;
        standout)    printf "[7m"   ;;
        nostandout)  printf "[27m"  ;;
        strikeout)   printf "[9m"   ;;
        nostrikeout) printf "[29m"  ;;

        fancyul)     printf "[4:1m" ;;
        dblfancyul)  printf "[4:2m" ;;
        undercurl)   printf "[4:3m" ;;
        dotfancyul)  printf "[4:4m" ;;
        dashfancyul) printf "[4:5m" ;;
        nofancyul)   printf "[4:0m" ;;

        *)           echo "";
    esac
}
# FG(), FGt(), BG() and BGt() {
if test "$( tput colors )" -ge 0; then
    # Expects: color number 0-255
    FG()  { printf "[38;5;$1m"; }
    BG()  { printf "[48;5;$1m"; }
    # Expects: 3 values (r g b) of 0-255
    FGt() { printf "[38;2;$1;$2;$3m"; }
    BGt() { printf "[48;2;$1;$2;$3m"; }
else
    FG()  { :; }
    BG()  { :; }
    FGt() { :; }
    BGt() { :; }
fi
# }
# Play rpg-cli {1
if command -v >/dev/null rpg-cli; then
cd () { # rpg-cli
    command cd "$@"
    rpg-cli cd -f .
    rpg-cli battle
}
delve () {
    current=$(basename $PWD)
    number_re='^[0-9]+$'

    if [[ $current =~ $number_re ]]; then
        next=$(($current + 1))
        command mkdir -p $next && cd $next && rpg-cli ls
    elif [[ -d 1 ]] ; then
        cd 1 && rpg-cli ls
    else
        command mkdir -p dungeon/1 && cd dungeon/1 && rpg-cli ls
    fi
}
fi # rpg-cli }
# Miscellaneous {1
lsp () { # Print numerical permissions at the start of ls -l output
# https://github.com/blaenk/dots/blob/master/zsh/zsh/functions.zsh

    # LS_COLOR_ALWAYS and LS_OPTS are defined in ~/.alias

    if command -v exa >/dev/null; then
        exa -l "$@"
    else
        command ls $LS_COLOR_ALWAYS $LS_OPTS -lh "$@" |
            awk '{
                k = 0;
                for (i = 0; i <= 8; i++)
                    k += ((substr($1, i+2, 1) ~ /[rwx]/) * 2^(8-i));
                if(k)
                    printf("%0o ",k);
                print;
        }'
    fi
}
ip () {
# 'ip get' prints current ip address and copies to clipboard
# All other commands are passed to the real 'ip' command
#
# https://jip.dev/posts/dots/
#

    # Use grc if it exists
    if command -v grc >/dev/null; then
        ip="grc ip"
    else
        ip="command ip"
    fi

    case "$1" in
        g | ge | get)
            res=$(curl -s ipinfo.io/ip)
            case $2 in
                c | co | cop | copy)
                    if command -v xclip >/dev/null; then
                        printf "%s" "$res" | xclip -in -selection clipboard
                        printf "copied %s to clipboard\n" "$res"
                    else
                        printf "%s\n" "xclip is not installed" >&2
                        printf "%s\n" "$res"
                    fi
                    ;;
                h | he | hel | help)
                    cat <<EOF
Usage: ip get [copy]

Print public IP address to stdout or to the X11 clipboard if [copy]
is present
EOF
                ;;
                *) printf "%s\n" "$res" ;;
            esac
            ;;
        *) $ip "$@" ;;
    esac
}
google () { # Google something
    # Create search string if arguments were passed
    if [[ "$*" ]]; then
        # Google search strings replace spaces with '+'
        IFS='+'
        local search_string="$*"
        unset IFS

        local url="search?hl=en&lr=&ie=UTF-8&oe=UTF-8&q="
        url="$url$search_string&btnG=Google+Search"
    fi

    # Open URL in browser. If no arguments were passed
    # it merely opens google.com
    openurl "www.google.com/$url"
}
define() { # Define words and phrases with google
    local y="$@"
    curl -sA"Opera" "http://www.google.com/search?q=define:${y// /+}" |
        grep -Eo '<li>[^<]+' |
        sed 's/^<li>//g' |
        nl |
        /usr/bin/perl -MHTML::Entities -pe 'decode_entities($_)'
}
rtfm() { # Check various forms of documentation
    man "$@" ||
        [[ -f "/usr/share/info/$@.info*" ]] && info "$@" ||
        echo "No info entry for $@" >/dev/stderr &&
        "$@" --help ||
        openurl "http://duckduckgo.com/?q=%21documentation+for+$@" ;
}
#### hb/hr/hbl {
# Bold, Reverse-Video and Blinking highlighted search
#
# Args:
#  $1 - search string
#  $2 - optional foreground color number
#
# Examples:
# who | hb "$USER" 1 
# ps | hr ".*$PPID.*" | hbl ".*$$.*"
####
hb() {
    local fx="[1m"
    _hb_hr_hbl "$1" "$fx" "$2"
}
hr() {
    local fx="[7m"
    _hb_hr_hbl "$1" "$fx" "$2"
}
hbl() {
    local fx="[5m"
    _hb_hr_hbl "$1" "$fx" "$2"
}
_hb_hr_hbl() {
    test $2 && local color="[38;5;$3m"
    local reset="[0m"
    sed "s/\($1\)/$2$color\1$reset/gI"
}
#}
lh() { # List last "n" commands in history
    history | tail -"$1"
}
manf() { # Open manpage for $1 at the first occurence of flag $2
# https://jip.dev/posts/dots/
      man -P "less -p \"^ +-$2\"" $1
}
wiki() { # Interact with wiki
# Inspired by: https://vimwiki.github.io/vimwikiwiki/Tips%20and%20Snips.html
    if test -z "$WIKI_DIR"; then
        printf "%s\n" '$WIKI_DIR is not defined'
        return 1
    fi

    case "$1" in
        git)
            git -C "$WIKI_DIR ${@:2}"
            ;;
        make)
            (cd "$WIKI_DIR" && make ${@:2})
            ;;
        view)
            test -n "$2" && BROWSER="$2"
            openurl "$WIKI_DIR/site/index.html"
            ;;
        help)
            cat <<'END'
Usage: wiki <command> [args ...]

Commands:
    edit             Edit $WIKI_DIR/content/index.md in $EDITOR
    git [args]       Pass [args] to git(1) and execute in $WIKI_DIR
    make [args]      Run make(1) [args] in $WIKI_DIR
    view [browser]   Use openurl to view the wiki at $WIKI_DIR/site.
                       Use [browser] to view. Default is $BROWSER
    help             View this help

    Edit is the default command

Note: $WIKI_DIR must be defined
END
            ;;
        edit | *)
            if test -z "$EDITOR"; then
                EDITOR=vim
            fi
            $EDITOR "$WIKI_DIR/content/index.md"
            ;;
        esac
}
sdfmap() { # Print ASCII map location of SDF user $1
    curl http://plewylli.sdf-eu.org/asciimap.cgi?$1
}
elinks() { # Reuse existing elinks instance
# Based on elinks contrib/TIPS-AND-TRICKS
    if command elinks -remote "ping()" 2>/dev/null; then
        if [ -n "$1" ]; then
            command elinks -remote "openURL($1,new-tab)"
        else
            command elinks -remote "reload()"
        fi
    else
        command elinks $1
    fi
}
# navi {1
_navi_call() {
    local result="$(navi --path ~/share/navi "$@" </dev/tty)"
    if [ -z "${result}" ]; then
        result="$(navi --path ~/share/navi --print </dev/tty)"
    fi
    printf "%s" "$result"
}
_navi_widget() {
    local -r input="${READLINE_LINE}"
    local -r last_command="$(echo "${input}" | navi fn widget::last_command)"

    if [ -z "${last_command}" ]; then 
        local -r output="$(_navi_call --print --fzf-overrides '--no-select-1')"
    else
        local -r find="$last_command"
        local -r replacement="$(_navi_call --print --query "${last_command}")"
        local -r output="${input//$find/$replacement}"
    fi

    READLINE_LINE="$output"
    READLINE_POINT=${#READLINE_LINE}
}
# Helper Functions {1
# (prefix names with '__')

# vim: foldlevel=0 foldmarker={,}

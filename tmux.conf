# vim: foldlevel=0
#
#  _                                               __ 
# | |_ _ __ ___  _   ___  __       ___ ___  _ __  / _|
# | __| '_ ` _ \| | | \ \/ /      / __/ _ \| '_ \| |_ 
# | |_| | | | | | |_| |>  <   _  | (_| (_) | | | |  _|
#  \__|_| |_| |_|\__,_/_/\_\ (_)  \___\___/|_| |_|_|  
#                                                    
#   Jeremy Brubaker's .tmux.conf. Some stuff in here was shame-
#   lessly ripped from places I completely forget about.

#   Written for tmux >2.3 (#[range=user|FOO] requires tmux â‰¥ 3.5)
#
#   https://github.com/jbrubake/dotfiles/blob/master/tmux.conf

# Folding cheet sheet (because I always forget)
# zR    open all folds
# zM    close all folds
# za    toggle fold at cursor position
# zj    move down to start of next fold
# zk    move up to end of previous fold
# Options {{{1
#########
#
# Set options:
#    Default is session option
# -g : global
# -w : set-window-option
# -s : server option
# -a : append
# -u : unset and inherit from global option
#

# Tell applications running in tmux what it's capabilities are
# tmux itself still uses the original value of $TERM (your actual terminal)
set-option -g default-terminal tmux-256color

# Turn on 256 color support for various underlying terminals (needed for Vim)
set-option -sa terminal-features ",*256*:RGB"
set-option -sa terminal-features ",alacritty*:RGB"
# Fancy underlines
set-option -ga terminal-features ",*:usstyle"

set-option -g   default-command "${SHELL}" # Don't spawn login shells
set-option -g   prefix C-s                 # Change prefix to ^S
set-option -g   base-index 1               # Start numbering windows at 1 instead of 0
set-option -g   pane-base-index 1          # Start numbering panes at 1 instead of 0
set-option -g   visual-activity on         # Visual notification on activity
set-option -g   set-titles off             # Set terminal title
set-option -g   set-titles-string "#h"     # Titlebar: "<hostname>"
set-option -g   mouse on                   # Mouse can be used in copy mode
set-option -g   history-limit 10000        # Lines of scrollback
set-option -g   renumber-windows on        # Renumber windows after closing a window
set-option -sg  escape-time 0              # Respond faster
set-option -wg  mode-keys vi               # vi copy mode
set-option -wg  monitor-activity on        # Higlight windows with activity
set-option -wg  aggressive-resize on       # Always resize windows
set-option -gq  @plugin_dir "~/.tmux/"     # Location of my plugin framework

# Colors {{{1
########
#
# black, red, green, yellow, blue, magenta, cyan, white
# brightxxx
# colour0 - colour255
# #ffffff
#
set-option -g status-style             fg=color255,bg=color233
set-option -g window-status-style      fg=color201,bg=color233
set-option -g pane-border-style        fg=color255
set-option -g pane-active-border-style fg=blue
set-option -g message-style            fg=color233,bg=color222

# Status Line {{{1
#############
#
set-option -g status 2
set-option -g status-position top
set-option -g status-interval 15      # Update interval (Default = 15)
set-option -g status-left-length 200  # Max length (Default = 10)
set-option -g status-right-length 200 # Max length (Default = 40)
set-option -g status-justify left     # Left justify window list

set-option -g window-status-format "#($(tmux show-option -gqv @plugin_dir)/status.sh window '#F')"
set-option -g window-status-current-format "#($(tmux show-option -gqv @plugin_dir)/status.sh window '#F')"

set-option -g status-left "#($(tmux show-option -gqv  @plugin_dir)/status.sh left)"
set-option -g status-right "#($(tmux show-option -gqv @plugin_dir)/status.sh right)"

set-option -g status-format[0] "#[align=left range=left #{status-left-style}]#[push-default]#{T;=/#{status-left-length}:status-left}#[nolist align=right range=right #{status-right-style}]#[push-default]#{T;=/#{status-right-length}:status-right}#[pop-default]#[norange default]"
set-option -g status-format[1] "#[pop-default]#[norange default]#[list=on align=centre]#[list=left-marker]<#[list=right-marker]>#[list=on]#{W:#[range=window|#{window_index} #{window-status-style}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#[push-default]#{T:window-status-format}#[pop-default]#[norange default]#{?window_end_flag,,#{window-status-separator}},#[range=window|#{window_index} list=focus #{?#{!=:#{window-status-current-style},default},#{window-status-current-style},#{window-status-style}}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#[push-default]#{T:window-status-current-format}#[pop-default]#[norange list=on default]#{?window_end_flag,,#{window-status-separator}}}"
# Clickable status bar locations {{{1
################################
bind -Troot MouseDown1Status if -F '#{==:#{mouse_status_range},window}' {
    select-window
} {
    if -F '#{==:#{mouse_status_range},new}' {
        new-window
    }
    if -F '#{==:#{mouse_status_range},clock}' {
        new-window 'cal; printf "Press enter..."; read'
    }
    if -F '#{==:#{mouse_status_range},memory}' {
        new-window 'htop'
    }
    if -F '#{==:#{mouse_status_range},load}' {
        new-window 'htop'
    }
    if -F '#{==:#{mouse_status_range},weather}' {
        new-window 'curl wttr.in; printf "Press enter..."; read'
    }
}

# Key Bindings {{{1
##############
#
# Bind options:
# -t <cmd table> : Binding applies to <cmd table>
# -r : key may repeat (see repeat-time option)
#
bind-key C-s send-prefix     # ^s^s sends a literal ^s
bind-key S   choose-session  # Default 's'
bind-key s   split-window -v -c "#{pane_current_path}" # Split top/bottom
bind-key v   split-window -h -c "#{pane_current_path}" # Split right/left
bind-key \"  split-window -v -c "#{pane_current_path}" # Split top/bottom
bind-key %   split-window -h -c "#{pane_current_path}" # Split right/left

# Resize panes using hjkl
#
bind-key -r h resize-pane -L
bind-key -r j resize-pane -D
bind-key -r k resize-pane -U
bind-key -r l resize-pane -R

# tmux pilot
#
PILOT_ROOT=$HOME/.vim/pack/minpac/opt/vim-tmux-pilot
if-shell '[ -r $PILOT_ROOT/pilot.tmux ]' {
    source-file $PILOT_ROOT/pilot.tmux

    # Use Alt+[hjkl] to navigate between panes
    #
    PILOT_KEY_H='M-h'
    PILOT_KEY_J='M-j'
    PILOT_KEY_K='M-k'
    PILOT_KEY_L='M-l'
    PILOT_KEY_P='M-\' # previous pane
}

# Reload .tmux.conf
bind-key r   source-file ~/.tmux.conf \; display "Reloaded!"

# Copy mode
#
# <prefix>C-c: enter copy mode
# v:         begin selection
# V:         begin line-wise selection
# y & Enter: copy to X11 clipboard
# r:         toggle rectangle selection mode
# Mouse:     select and copy to X11 clipboard
#
set-option -s copy-command 'xclip -in -selection clipboard'
bind-key    C-c copy-mode -e # -e: exit copy mode when scrolling to the bottom
bind-key -T     copy-mode-vi v                 send-keys -X begin-selection
bind-key -T     copy-mode-vi V                 send-keys -X select-line
bind-key -T     copy-mode-vi y                 send-keys -X copy-pipe
bind-key -T     copy-mode-vi Enter             send-keys y
bind-key -T     copy-mode-vi r                 send-keys -X rectangle-toggle
bind-key -T     copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe

# Shift + Page{Up,Down} works as expected
#
bind-key -T root S-PageUp   copy-mode -eu
bind-key -T root S-PageDown send-keys PageDown

# Other Bindings {{{1
##################
#
bind-key b   break-pane     # Make current pane its own window
bind-key B   break-pane -d  # Make current pane its own window but don't switch to it
bind-key j   join-pane      # Split pane and bring in marked pane
bind-key m   select-pane -m # mark pane
bind-key C-o rotate-window  # Rotate panes counter-clockwise
bind-key ,   command-prompt -I'#W' { rename-window -- '%%' }


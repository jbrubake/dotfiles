$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function ==
/*-------------------------------------------------*\
| |?FUNCTION_NAME|
| 
| <CURSOR><+Brief Description+>
| 
| Arguments:
|     <+Arguments+>
| Returns:
|     <+Return values+>
| Notes:
|     <+Notes+>
\*-------------------------------------------------*/
|?TYPE|
|FUNCTION_NAME| ( <+Argument list+> )
{
<SPLIT>	return <+Return value+>;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function-static ==
/*-------------------------------------------------*\
| |?FUNCTION_NAME|
| 
| <CURSOR><+Brief Description+>
| 
| Arguments:
|     <+Arguments+>
| Returns:
|     <+Return values+>
| Notes:
|     <+Notes+>
\*-------------------------------------------------*/
static |?TYPE|
|FUNCTION_NAME| ( <+Argument list+> )
{
<SPLIT>	return <+Return value+>;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.main ==
/*-------------------------------------------------*\
| main
| 
| Returns:
|     <+Return values+>
| Notes:
|     <+Notes+>
\*-------------------------------------------------*/
int
main (int argc, char **argv)
{
<CURSOR>
<SPLIT>    return 0;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.enum ==
enum |?ENUM_NAME| {
<CURSOR><SPLIT>};

typedef enum |ENUM_NAME| |ENUM_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.struct ==
/*-------------------------------------------------*\
| |?STRUCT_NAME|
| 
| <+Brief description+>
| 
| Members:
|     <+Members+>
\*-------------------------------------------------*/
struct |STRUCT_NAME| {
<CURSOR><SPLIT>};

typedef struct |STRUCT_NAME| |STRUCT_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.union ==
union |?UNION_NAME| {
<CURSOR><SPLIT>};

typedef union |UNION_NAME| |UNION_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.printf ==
printf ("<CURSOR>", );
== idioms.scanf ==
scanf ("<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.calloc ==
<CURSOR>|?POINTER| = xcalloc (|?Type|, |?Number|);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.malloc ==
<CURSOR>|?POINTER| = xmalloc (|?Type|, |?Number|);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.sizeof == insert ==
sizeof (<CURSOR><SPLIT>)
== idioms.assert == insert ==
assert (<CURSOR><SPLIT>);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-input-file ==
FILE *|?FILEPOINTER|;

|FILEPOINTER| = fopen(|?FILENAME| , "r");
if ( |FILEPOINTER| == NULL )
{
    error_at_line (1, errno, __FILE__, __LINE__,
        "Can't open file %s\n", |FILENAME|);
}

<CURSOR><SPLIT>

if( fclose(|FILEPOINTER|) == EOF )
{
    error_at_line (1, errno, __FILE__, __LINE__,
        "Can't close file %s\n", |FILENAME|);
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-output-file ==
FILE *|?FILEPOINTER|;

|FILEPOINTER| = fopen(|?FILENAME| , "w");
if ( |FILEPOINTER| == NULL )
{
    error_at_line (1, errno, __FILE__, __LINE__,
        "Can't open file %s\n", |FILENAME|);
}

<CURSOR><SPLIT>

if( fclose(|FILEPOINTER|) == EOF )
{
    error_at_line (1, errno, __FILE__, __LINE__,
        "Can't close file %s\n", |FILENAME|);
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.fprintf ==
fprintf (|?FILEPOINTER|, "<CURSOR>", );
== idioms.fscanf ==
fscanf (|?FILEPOINTER|, "<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

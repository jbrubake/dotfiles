#!/bin/sh vim: foldlevel=0

# Prompt functions {{{1
# prompt_detached: Determine number of detached screen/tmux sessions {{{2
prompt_detached () {
    local n_screen=$(screen -ls 2> /dev/null | grep -c '[Dd]etach[^)]*)$')
    local n_tmux=$(tmux list-sessions 2> /dev/null | grep -cv attached)
    local detached=$(( $n_screen + $n_tmux ))
    if [[ $detached != "0" ]]; then
        printf "%sd" "${detached}"
    fi
}

# prompt_jobs: Get running and stopped jobs {{{2
# Only works under Bash
prompt_jobs () {
    printf "%s&/%sz" $( jobs -r | wc -l | tr -d " " ) $( jobs -s | wc -l | tr -d " " )
}
# prompt_load: Get system load {{{2
prompt_load () {
    local one=
    local five=
    local rest=
    read one five rest < /proc/loadavg
    printf "%s:%s" "$one" "$five"
}

# prompt_uptime: Get uptime {{{2
prompt_uptime () {
    local uptime=$(</proc/uptime)
    uptime=${uptime%%.*}

    local mins=$(( uptime/60%60 ))
    local hours=$(( uptime/60/60%24 ))
    local days=$(( uptime/60/60/24 ))

    if [ "$days" -ne "0" ]
    then
        printf "%sd " "${days}"
    fi
    printf "%s:%s" "${hours}" "${mins}"
}

# prompt_user: Determine if root or not logged in user {{{2
prompt_user () {
    if [ "x$EUID" = 'x0' ]; then
        printf "%s" 'root'
    elif [ $USER != `logname 2>/dev/null` ]; then
        printf "su to %s" "$USER"
    else
        printf "%s" $USER
    fi
}

# prompt_ssh: Determine if running under ssh {{{2
prompt_ssh () {
    if [ -n "$SSH_CLIENT$SSH2_CLIENT$SSH_TTY" ]; then
        printf "%s" 'ssh'
    else
        printf "%s" 'local'
    fi
}

# prompt_tty: Get tty {{{2
prompt_tty () {
    tty | sed -e 's:/dev/::'
}

# prompt_pwd: Print pwd with colors {{{2
#
# prompt_pwd modified from Yu-Jie Lin's example <libb.wordpress.com>
#
# Arguments:
#   $1 : directory color
#   $2 : slash color
prompt_pwd () {
    local dir_clr=$1
    local slash_clr=$2
    echo $(pwd | sed "s@^@$dir_clr@" | sed "s@$HOME@~@" | sed "s@/@$slash_clr/$dir_clr@g")
}

# prompt_error: Print exit value of last command if it is non-zero {{{2
#
# prompt_error modified from Yu-Jie Lin's example <libb.wordpress.com>
#
# Arguments:
#   $1: output color
prompt_error () {
    local error_clr=$1

    if [ $RETVAL -gt 0 ]; then (( i = 3 - ${#RETVAL} ));
        printf "%s" "$error_clr[";
        [ $i -gt 0 ] && printf "%s" " ";
        printf "%s" "$RETVAL";
        [ $i -eq 2 ] && printf "%s" " ";
        printf "%s" "]$(FX reset)";
    fi
}

# Prompt color definitions {{{1
#

# Determine if terminal supports color
#
test $( tput colors ) -ge 0 && HAS_COLOR=yes

if test $HAS_COLOR; then
    dir_clr="\[$(FG 2)\]"
    slash_clr="\[$(FG 1)\]"
    user_clr="\[$(FG 6)\]"
    root_user_clr="\[$(FG 1)\]"
    at_clr="\[$(FG 4)\]"
    hostname_clr="\[$(FG 5)\]"
    ssh_clr="\[$(FG 3)\]"
    jobs_clr="\[$(FG 7)\]"
    history_clr="\[$(FG 2)\]"
    error_clr="\[$(FG 7; BG 1)\]"
    prompt_clr="\[$(FG 3)\]"
    bracket_clr="\[$(FG 4)\]"
    reset="\[$(FX reset)\]"

    # Colorize username differently if we are root
    [ $UID == '0' ] && user_clr=$root_user_clr
else
    dir_clr=
    slash_clr=
    user_clr=
    root_user_clr=
    at_clr=
    hostname_clr=
    ssh_clr=
    jobs_clr=
    history_clr=
    error_clr=
    prompt_clr=
    bracket_clr=
    reset=
fi

# Prompts {{{1

#############################################
# This prompt looks roughly like this:
#
# 'pwd'
# 'user@host (ssh)
# '{jobs} [history] [$?]'
# '$ '
#############################################

PS1="\
$reset\$(prompt_pwd $dir_clr $slash_clr)
$user_clr$(prompt_user)$at_clr@$hostname_clr\h $bracket_clr($ssh_clr$(prompt_ssh)$bracket_clr)
$brackrt_clr{$jobs_clr\$(prompt_jobs)$bracket_clr} $bracket_clr!$history_clr\! \$(prompt_error $error_clr)
$prompt_clr$ $reset"

# PROMPT_COMMAND {{{1

# Need to save $? here so that ps1_error can occur anywhere in the prompt
# Otherwise, new_pwd will clobber the value of $? that we want
#
# history -a allows multiple shells to write to the same history file
#
PROMPT_COMMAND='RETVAL=$?; history -a'

# Clean up {{{1
unset dir_clr slash_clr hostname_clr at_clr bracket_clr
unset history_clr error_clr prompt_clr user_clr root_user_clr
unset ssh_clr jobs_clr
unset reset
unset HAS_COLOR


#!/bin/sh
#
# Jeremy Brubaker <jbru362@gmail.com>

# Helper functions {{{1
# NOTE: these are unset at the end of the file
#
# have {{{2
#
# @description Check PATH for a command
#
# @arg $1 str Command to search for
#
# @exitcode true if found
# @exitcode false if not found
#
have() { command -v "$1" >/dev/null; }

# Defaults {{{1
#
# Defining the eventual alias happens in one of two places
# because it may end up using grc(1)
jobs='jobs -l' # list PIDs

# grc(1)-only aliases {{{1
#
# Put these first so that they can be overriden
#
if have grc; then
    GRC_OPTS='-es' # colorize stderr and stdout
    _grc='grc $GRC_OPTS'
    alias grc=$_grc

    # Create alias for all configs found *if* the command exists
    # TODO: check for directory existence
    for c in /usr/share/grc/conf.* ~/.grc/*; do
        c=${c##*/}; c=${c#conf.} # extract command name
        have $c && alias $c="$_grc $c"
    done

    # Always create these
    alias configure="$_grc ./configure"
    alias   printev='printenv | grcat conf.printenv'
    alias   jobs="$jobs${BASH:+ | grcat conf.jobs}" # colorized version
fi

# ls(1) {{{1
#
_ls=$LS
case $LS in
    ls) command ls --version | grep -q GNU && _ls=gnu-ls ;;
    '') LS=ls; _ls=$LS ;;
esac

case $_ls in
    eza | exa)
        LS_OPTS="$LS_OPTS"
        ls_opts='';      ll_opts='-lg';
        la_opts='-a';    lla_opts='-lag';
        ld_opts='-d .*'; lld_opts='-lg -d .*';
        lsap_opts=''
        ;;
    gnu-ls) # GNU ls
        LS_OPTS="$LS_OPTS"
        ls_opts='';      ll_opts='-l';
        la_opts='-A';    lla_opts='-lA';
        ld_opts='-d .*'; lld_opts='-l -d .*';
        lsap_opts=''
        ;;
    ls) # POSIX ls
        ls_opts='';      ll_opts='-l';
        la_opts='-a';    lla_opts='-la';
        ld_opts='-d .*'; lld_opts='-lg -d .*';
        lsap_opts=''
        ;;
    *) printf 'How did we get here?' >&2 ;;
esac

# Force color if using grc with an ls that supports color
unset grc_col
if have grc && [ -n "$HAS_COLOR" ] && [ "$_ls" = 'gnu-ls' ]; then
    grc_col='--color=always'
fi

alias   ls="$LS $ls_opts "'$LS_OPTS'
alias   ll="${_grc:+"$_grc "}$LS $ll_opts "'$LS_OPTS'" $grc_col"
alias   la="$LS $la_opts "'$LS_OPTS'
alias  lla="${_grc:+"$_grc "} $LS $lla_opts "'$LS_OPTS'" $grc_col"
alias   l.="$LS $ld_opts "'$LS_OPTS'
alias  ll.="${_grc:+"$_grc "} $LS $lld_opts "'$LS_OPTS'" $grc_col"
alias lsap='lsp'"$lsap_opts" # lsp is defined in ~/.functions

unset _ls ls_opts la_opts ll_opts lla_opts ld_opts lld_opts ldap_opts grc_col

# cd {{{1
alias  ..='cd ..'          # up one directory
alias ...='cd ../..'       # up two directories
alias ${BASH:+--} -='cd -' # cd to previous directory

# X-specific {{{1
#
if [ -n "$DISPLAY" ]; then
    # force using vimx so Vim can access the system clipboard
    if have vimx; then
        alias vim=vimx
        alias  vi=vimx
    fi
fi

# OS-specific {{{1
#
case $(uname -o) in
    *) ;;
esac

# Alternatives {{{1
alias     term='( $(my terminal)& )'
alias     calc='( $(my calculator)& )'
alias calendar='( $(my calendar)& )'

# Cassowary {{{1
#
if have cassowary; then
    alias word='cassowary -c guest-run winword'
    alias excel='cassowary -c guest-run excel'
    alias ppt='cassowary -c guest-run powerpnt'
    alias mspub='cassowary -c guest-run mspub'
    alias onenote='cassowary -c guest-run onenote'
    alias access='cassowary -c guest-run msaccess'
fi

# PAGER / cat {{{1
#
# - less / zless calls $PAGER
# - syntax highlight cat if possible (depends on *_STYLE variables)
#
case $PAGER in
    vimpager)
        alias  less='vimpager'
        alias zless='vimpager'
        alias cat='vimcat' ;;
    bat)
        alias  less='bat -p -pager less'
        alias zless='bat -p -pager less'
        alias cat='bat -p --paging never' ;;
    *)
        if [ "$PAGER" != less ]; then
            alias  less=$PAGER
            alias zless=$PAGER
        fi
        if have highlight; then
            cat() {
                # if stdout is the terminal, use highlight but loop through $@
                # so it works properly. Add '-' to read stdin if not given
                if [ -t 1 ]; then
                    [ $# -eq 0 ] && set -- -
                    for _a in $@; do
                            highlight --force -O truecolor --style "${HIGHLIGHT_STYLE:-solarized-dark}" "$_a"
                    done
                # Use cat(1) if redirecting stdout so no color escapes are
                # printed
                else
                    /bin/cat $@
                fi
            }
        elif have bat; then
            alias cat='bat -p --paging never --theme ${BAT_STYLE:-solarized-light}'
        elif have pygmentize; then
            alias cat='pygmentize -O style=${PYGMENTIZE_STYLE:-solarized-light} -g'
        fi ;;
esac

# Get public IP & ipinfo.io{{{1
#
if have curl; then
    alias   myip='curl http://ipecho.net/plain; echo'
    alias ipinfo='curl http://ipinfo.io; echo'
elif have wget; then
    alias   myip='wget http://ipecho.net/plain -O - -q; echo'
    alias ipinfo='wget http://ipinfo.io -O - -q; echo'
else
    alias   myip='printf "wget or curl not available\n"'
    alias ipinfo='myip'
fi

# Miscellaneous {{{1
#
have reset || alias reset='tput sgr0'  # reset terminal
have clear || alias clear='tput clear' # emulate clear(1) if I don't have it
              alias   cls='clear'      # windows clear

have todo.sh   && alias    t='todo.sh'        # easier todo.sh
have rpg-cli   && alias  rpg='rpg-cli'        # easier rpg-cli
have colormake && alias make='colormake'      # use colormake
have buku      && alias    b='buku --suggest' # easier buku

alias             +x='chmod +x' # make file executable
alias ${BASH:+--} -x='chmod -x' # make file non-executable 

alias      :q='exit'                                    # exit like it's vim
alias    bell='printf "\a"'                             # ring the bell
alias    gist='vim "+Gist -l"'                          # open Gist browser
alias    grep="grep ${HAS_COLOR:+--color=auto}"         # force color in *grep
alias     loc='locate -d "$LOCATEDB" "$@"'              # use my personal locate(1) db
alias      nu="who | cut -d' ' -f1 | uniq | wc -l"      # get number of logged on users
alias       r='fc -s'                                   # ^old^new but global
alias    sudo='sudo '                                   # enable aliases to be sudoâ€™ed
alias   tree='command tree -CFI ".git" --dirsfirst'     # better looking tree(1)
alias unexec='find . -type f -exec chmod ogu-x "{}" \;' # chmod -x all FILES in tree (needed when copying from Windows)

alias pickfont='fc-list | sed -e "s/.*: //" -e "s/,.*//" -e "s/:.*//" | sort -u | fzf'

# start / stop a local-only ssh server
if have sshd; then
    alias klsshd='kill -TERM $(command cat $(sshd -f "$LOCAL_SSHD_CONFIG" -T | grep pidfile | cut -d" " -f2))'  # Stop user sshd
    alias lsshd='/usr/sbin/sshd -f "$LOCAL_SSHD_CONFIG"'
fi

# fall back if grc(1) not available
alias jobs=$jobs

# Use grc(1) if available {{{2
#
alias   df="${_grc:+"$_grc "}df -hT"              # human-readable is better
alias   du="${_grc:+"$_grc "}du -h"               # human-readable is better
alias  du1="${_grc:+"$_grc "}du -h --max-depth=1" # top-level summary
alias free="${_grc:+"$_grc "}free -h"             # human-readable is better

# Cleanup {{{1
#
unset color_flag
unset have
unset _grc
unset jobs

# vim: ft=sh foldlevel=0

